use regex::{Regex, Captures};
use std::fmt;


pub const MASK_4B: usize = 0xF00;
pub const MASK_6B: usize = 0xFC0;
pub const MASK_7B: usize = 0xFE0;
pub const MASK_8B: usize = 0xFF0;
pub const MASK_10B: usize = 0xFFC;
pub const MASK_12B: usize = 0xFFF;

use crate::cpu::Cpu;


pub struct InstructionWithArgs {
    instr: &'static Instruction,
    args: [u8; 2],
}

impl InstructionWithArgs {
    pub fn from_code(code: u16) -> Option<Self> {
        let instr = INSTRUCTIONS.iter().find(|instr| (code & instr.mask as u16) == instr.code as u16);

        if let Some(instr) = instr {
            if instr.mask_arg0 != 0 {
                let arg1 = ((code & instr.mask_arg0 as u16) >> instr.shift_arg0) as u8;
                let arg2 = (code & !(instr.mask as u16 | instr.mask_arg0 as u16)) as u8;
                return Some(Self { instr, args: [arg1, arg2] });
            } else {
                let arg1 = ((code & !instr.mask as u16) >> instr.shift_arg0) as u8;
                return Some(Self { instr, args: [arg1, 0] });
            }
        }

        None
    }

    pub fn exec(&self, cpu: &mut Cpu) {
        (self.instr.func)(cpu, self.args[0], self.args[1]);
    }

    pub fn get_cycles(&self) -> u8 {
        self.instr.cycles
    }

    pub fn is_pset(&self) -> bool {
        self.instr.code == INSTRUCTIONS[0].code
    }

    pub fn is_ei(&self) -> bool {
        self.instr.code == INSTRUCTIONS[58].code
    }
}

impl fmt::Display for InstructionWithArgs {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let re = Regex::new(r"\{(:[^}]*)?\}").unwrap();
        let mut arg_iter = self.args.iter();
        let serialized = re.replace_all(self.instr.log, |caps: &Captures| {
            let arg = arg_iter.next().copied().unwrap_or(0);
            if let Some(spec) = caps.get(1) {
                // Remove the leading ':' from the specifier
                let spec = &spec.as_str()[1..];
                match spec {
                    "02X" => format!("{:02X}", arg),
                    "X"   => format!("{:X}", arg),
                    _     => format!("{}", arg), // fallback to decimal
                }
            } else {
                format!("{}", arg)
            }
        }).to_string();

        write!(f, "{}", serialized)
    }
}




/// Represents a single E0C6S46 instruction
pub struct Instruction {
    pub log: &'static str,
    pub code: usize,
    pub mask: usize,
    pub shift_arg0: usize,
    pub mask_arg0: usize,
    pub cycles: u8,
    pub func: fn(&mut Cpu, u8, u8),
}


// inventory::collect!(Instruction);

// List of instructions in order of execution
pub static INSTRUCTIONS: &[Instruction] = &[
    Instruction {
        log: "PSET #0x{:02X}",
        code: 0xE40,
        mask: MASK_7B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pset_cb,
    },
    Instruction {
        log: "JP   #0x{:02X}",
        code: 0x000,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::jp_cb,
    },
    Instruction {
        log: "JP   C #0x{:02X}",
        code: 0x200,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::jp_c_cb,
    },
    Instruction {
        log: "JP   NC #0x{:02X}",
        code: 0x300,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::jp_nc_cb,
    },
    Instruction {
        log: "JP   Z #0x{:02X}",
        code: 0x600,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::jp_z_cb,
    },
    Instruction {
        log: "JP   NZ #0x{:02X}",
        code: 0x700,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::jp_nz_cb,
    },
    Instruction {
        log: "JPBA",
        code: 0xFE8,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::jpba_cb,
    },
    Instruction {
        log: "CALL #0x{:02X}",
        code: 0x400,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::call_cb,
    },
    Instruction {
        log: "CALZ #0x{:02X}",
        code: 0x500,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::calz_cb,
    },
    Instruction {
        log: "RET",
        code: 0xFDF,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::ret_cb,
    },
    Instruction {
        log: "RETS",
        code: 0xFDE,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 12,
        func: Cpu::rets_cb,
    },
    Instruction {
        log: "RETD #0x{:02X}",
        code: 0x100,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 12,
        func: Cpu::retd_cb,
    },
    Instruction {
        log: "NOP5",
        code: 0xFFB,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::nop5_cb,
    },
    Instruction {
        log: "NOP7",
        code: 0xFFF,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::nop7_cb,
    },
    Instruction {
        log: "HALT",
        code: 0xFF8,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::halt_cb,
    },
    Instruction {
        log: "INC  X #0x{:02X}",
        code: 0xEE0,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::inc_x_cb,
    },
    Instruction {
        log: "INC  Y #0x{:02X}",
        code: 0xEF0,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::inc_y_cb,
    },
    Instruction {
        log: "LD   X #0x{:02X}",
        code: 0xB00,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_x_cb,
    },
    Instruction {
        log: "LD   Y #0x{:02X}",
        code: 0x800,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_y_cb,
    },
    Instruction {
        log: "LD   XP R({:X})",
        code: 0xE80,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_xp_r_cb,
    },
    Instruction {
        log: "LD   XH R({:X})",
        code: 0xE84,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_xh_r_cb,
    },
    Instruction {
        log: "LD   XL R({:X})",
        code: 0xE88,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_xl_r_cb,
    },
    Instruction {
        log: "LD   YP R({:X})",
        code: 0xE90,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_yp_r_cb,
    },
    Instruction {
        log: "LD   YH R({:X})",
        code: 0xE94,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_yh_r_cb,
    },
    Instruction {
        log: "LD   YL R({:X})",
        code: 0xE98,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_yl_r_cb,
    },
    Instruction {
        log: "LD   R({:X}) XP",
        code: 0xEA0,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_xp_cb,
    },
    Instruction {
        log: "LD   R({:X}) XH",
        code: 0xEA4,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_xh_cb,
    },
    Instruction {
        log: "LD   R({:X}) XL",
        code: 0xEA8,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_xl_cb,
    },
    Instruction {
        log: "LD   R({:X}) YP",
        code: 0xEB0,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_yp_cb,
    },
    Instruction {
        log: "LD   R({:X}) YH",
        code: 0xEB4,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_yh_cb,
    },
    Instruction {
        log: "LD   R({:X}) YL",
        code: 0xEB8,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_yl_cb,
    },
    Instruction {
        log: "ADC  XH #0x{:02X}",
        code: 0xA00,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::adc_xh_cb,
    },
    Instruction {
        log: "ADC  XL #0x{:02X}",
        code: 0xA10,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::adc_xl_cb,
    },
    Instruction {
        log: "ADC  YH #0x{:02X}",
        code: 0xA20,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::adc_yh_cb,
    },
    Instruction {
        log: "ADC  YL #0x{:02X}",
        code: 0xA30,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::adc_yl_cb,
    },
    Instruction {
        log: "CP   XH #0x{:02X}",
        code: 0xA40,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::cp_xh_cb,
    },
    Instruction {
        log: "CP   XL #0x{:02X}",
        code: 0xA50,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::cp_xl_cb,
    },
    Instruction {
        log: "CP   YH #0x{:02X}",
        code: 0xA60,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::cp_yh_cb,
    },
    Instruction {
        log: "CP   YL #0x{:02X}",
        code: 0xA70,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::cp_yl_cb,
    },
    Instruction {
        log: "LD   R({:X}) #0x{:02X}",
        code: 0xE00,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 5,
        func: Cpu::ld_r_i_cb,
    },
    Instruction {
        log: "LD   R({:X}) Q({:X})",
        code: 0xEC0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 5,
        func: Cpu::ld_r_q_cb,
    },
    Instruction {
        log: "LD   A M(#0x{:02X})",
        code: 0xFA0,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_a_mn_cb,
    },
    Instruction {
        log: "LD   B M(#0x{:02X})",
        code: 0xFB0,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_b_mn_cb,
    },
    Instruction {
        log: "LD   M(#0x{:02X}) A",
        code: 0xF80,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_mn_a_cb,
    },
    Instruction {
        log: "LD   M(#0x{:02X}) B",
        code: 0xF90,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_mn_b_cb,
    },
    Instruction {
        log: "LDPX MX #0x{:02X}",
        code: 0xE60,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ldpx_mx_cb,
    },
    Instruction {
        log: "LDPX R({:X}) Q({:X})",
        code: 0xEE0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 5,
        func: Cpu::ldpx_r_cb,
    },
    Instruction {
        log: "LDPY MY #0x{:02X}",
        code: 0xE70,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ldpy_my_cb,
    },
    Instruction {
        log: "LDPY R({:X}) Q({:X})",
        code: 0xEF0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 5,
        func: Cpu::ldpy_r_cb,
    },
    Instruction {
        log: "LBPX #0x{:02X}",
        code: 0x900,
        mask: MASK_4B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::lbpx_cb,
    },
    Instruction {
        log: "SET  #0x{:02X}",
        code: 0xF40,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::set_cb,
    },
    Instruction {
        log: "RST  #0x{:02X}",
        code: 0xF50,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::rst_cb,
    },
    Instruction {
        log: "SCF",
        code: 0xF41,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::scf_cb,
    },
    Instruction {
        log: "RCF",
        code: 0xF5E,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::rcf_cb,
    },
    Instruction {
        log: "SZF",
        code: 0xF42,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::szf_cb,
    },
    Instruction {
        log: "RZF",
        code: 0xF5D,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::rzf_cb,
    },
    Instruction {
        log: "SDF",
        code: 0xF44,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::sdf_cb,
    },
    Instruction {
        log: "RDF",
        code: 0xF5B,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::rdf_cb,
    },
    Instruction {
        log: "EI",
        code: 0xF48,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::ei_cb,
    },
    Instruction {
        log: "DI",
        code: 0xF57,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::di_cb,
    },
    Instruction {
        log: "INC  SP",
        code: 0xFDB,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::inc_sp_cb,
    },
    Instruction {
        log: "DEC  SP",
        code: 0xFCB,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::dec_sp_cb,
    },
    Instruction {
        log: "PUSH R({:X})",
        code: 0xFC0,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_r_cb,
    },
    Instruction {
        log: "PUSH XP",
        code: 0xFC4,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_xp_cb,
    },
    Instruction {
        log: "PUSH XH",
        code: 0xFC5,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_xh_cb,
    },
    Instruction {
        log: "PUSH XL",
        code: 0xFC6,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_xl_cb,
    },
    Instruction {
        log: "PUSH YP",
        code: 0xFC7,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_yp_cb,
    },
    Instruction {
        log: "PUSH YH",
        code: 0xFC8,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_yh_cb,
    },
    Instruction {
        log: "PUSH YL",
        code: 0xFC9,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_yl_cb,
    },
    Instruction {
        log: "PUSH F",
        code: 0xFCA,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::push_f_cb,
    },
    Instruction {
        log: "POP  R({:X})",
        code: 0xFD0,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_r_cb,
    },
    Instruction {
        log: "POP  XP",
        code: 0xFD4,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_xp_cb,
    },
    Instruction {
        log: "POP  XH",
        code: 0xFD5,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_xh_cb,
    },
    Instruction {
        log: "POP  XL",
        code: 0xFD6,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_xl_cb,
    },
    Instruction {
        log: "POP  YP",
        code: 0xFD7,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_yp_cb,
    },
    Instruction {
        log: "POP  YH",
        code: 0xFD8,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_yh_cb,
    },
    Instruction {
        log: "POP  YL",
        code: 0xFD9,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_yl_cb,
    },
    Instruction {
        log: "POP  F",
        code: 0xFDA,
        mask: MASK_12B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::pop_f_cb,
    },
    Instruction {
        log: "LD   SPH R({:X})",
        code: 0xFE0,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_sph_r_cb,
    },
    Instruction {
        log: "LD   SPL R({:X})",
        code: 0xFF0,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_spl_r_cb,
    },
    Instruction {
        log: "LD   R({:X}) SPH",
        code: 0xFE4,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_sph_cb,
    },
    Instruction {
        log: "LD   R({:X}) SPL",
        code: 0xFF4,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::ld_r_spl_cb,
    },
    Instruction {
        log: "ADD  R({:X}) #0x{:02X}",
        code: 0xC00,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::add_r_i_cb,
    },
    Instruction {
        log: "ADD  R({:X}) Q({:X})",
        code: 0xA80,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::add_r_q_cb,
    },
    Instruction {
        log: "ADC  R({:X}) #0x{:02X}",
        code: 0xC40,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::adc_r_i_cb,
    },
    Instruction {
        log: "ADC  R({:X}) Q({:X})",
        code: 0xA90,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::adc_r_q_cb,
    },
    Instruction {
        log: "SUB  R({:X}) Q({:X})",
        code: 0xAA0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::sub_cb,
    },
    Instruction {
        log: "SBC  R({:X}) #0x{:02X}",
        code: 0xD40,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::sbc_r_i_cb,
    },
    Instruction {
        log: "SBC  R({:X}) Q({:X})",
        code: 0xAB0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::sbc_r_q_cb,
    },
    Instruction {
        log: "AND  R({:X}) #0x{:02X}",
        code: 0xC80,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::and_r_i_cb,
    },
    Instruction {
        log: "AND  R({:X}) Q({:X})",
        code: 0xAC0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::and_r_q_cb,
    },
    Instruction {
        log: "OR   R({:X}) #0x{:02X}",
        code: 0xCC0,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::or_r_i_cb,
    },
    Instruction {
        log: "OR   R({:X}) Q({:X})",
        code: 0xAD0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::or_r_q_cb,
    },
    Instruction {
        log: "XOR  R({:X}) #0x{:02X}",
        code: 0xD00,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::xor_r_i_cb,
    },
    Instruction {
        log: "XOR  R({:X}) Q({:X})",
        code: 0xAE0,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::xor_r_q_cb,
    },
    Instruction {
        log: "CP   R({:X}) #0x{:02X}",
        code: 0xDC0,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::cp_r_i_cb,
    },
    Instruction {
        log: "CP   R({:X}) Q({:X})",
        code: 0xF00,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::cp_r_q_cb,
    },
    Instruction {
        log: "FAN  R({:X}) #0x{:02X}",
        code: 0xD80,
        mask: MASK_6B,
        shift_arg0: 4,
        mask_arg0: 0x030,
        cycles: 7,
        func: Cpu::fan_r_i_cb,
    },
    Instruction {
        log: "FAN  R({:X}) Q({:X})",
        code: 0xF10,
        mask: MASK_8B,
        shift_arg0: 2,
        mask_arg0: 0x00C,
        cycles: 7,
        func: Cpu::fan_r_q_cb,
    },
    Instruction {
        log: "RLC  R({:X})",
        code: 0xAF0,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::rlc_cb,
    },
    Instruction {
        log: "RRC  R({:X})",
        code: 0xE8C,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 5,
        func: Cpu::rrc_cb,
    },
    Instruction {
        log: "INC  M(#0x{:02X})",
        code: 0xF60,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::inc_mn_cb,
    },
    Instruction {
        log: "DEC  M(#0x{:02X})",
        code: 0xF70,
        mask: MASK_8B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::dec_mn_cb,
    },
    Instruction {
        log: "ACPX R({:X})",
        code: 0xF28,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::acpx_cb,
    },
    Instruction {
        log: "ACPY R({:X})",
        code: 0xF2C,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::acpy_cb,
    },
    Instruction {
        log: "SCPX R({:X})",
        code: 0xF38,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::scpx_cb,
    },
    Instruction {
        log: "SCPY R({:X})",
        code: 0xF3C,
        mask: MASK_10B,
        shift_arg0: 0,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::scpy_cb,
    },
    Instruction {
        log: "NOT  R({:X})",
        code: 0xD0F,
        mask: 0xFCF,
        shift_arg0: 4,
        mask_arg0: 0,
        cycles: 7,
        func: Cpu::not_cb,
    },
];
